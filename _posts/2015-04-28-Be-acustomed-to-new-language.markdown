---
layout: post
title:  "适应新语言的生态环境"
date:   2015-04-28 15:49
categories: programming
---

最近同事们都在学C＋＋, 大家大概都意识到了Delphi未来很难说，对此，我应该是表示赞同的，　从小时候的QB,到高中学C, 大学学C++又长期使用，短暂接触Java后果断放弃, 再到工作后学Delphi, 回顾并继续学习Erlang, 个人开发全面转到纯C，对于编程语言的学习还算是有点儿体会吧。

在听他们的讨论中，经常听到这样的话：C＋＋里能不能像Delphi这样XXX……，　听到这样的话我总觉得很无聊，当然，在开始学Delphi时候我也会这样：Delphi里能不能像C＋＋一样……，而且会把C++的一些编程习惯和风格代入Delphi里。时间长了，开始时候还觉得引入了良好的风格和新的东西，久而久之才明白这样最终使得程序不易理解和维护，也会又不少副作用。

事实上，我们使用一种以上语言一段时间之后就会发现，编程语言不仅仅是语言而已，它们有着各自不同的生态环境，我们不应该把一种生态环境里的东西带到另一种生态环境中去。其实这和我们学习外语是一样的，我们当然不能按照汉语句子的语序按部就班到英语或者德语里面，不能把汉语文化强行塞入英语文化中去，可以介绍使其他人了解，但无法强行组合。

我想应该已经说明白了，当你学习新的语言时候，不论是平时说话表达的语言还是程序设计语言，可以互相类比来帮助学习，但不可以强行套入，否则只会弄得驴唇不对马嘴，结果是四不像。

汉语背后有着中国的文化，英语背后有着欧美文化，有些时候它们会有一定程度的融合，互相影响，但这种潜移默化的影响是自然而然的，经过时间积累和沉淀，正如英语中经过成百上千年融合了部分的拉丁语、德语、法语等等的元素。同理，程序设计语言也是一样，某种语言可能会在需要的时候加入某些其他语言已经有的新特性，但是在还不支持这些新特性的时候多数情况下我们不需要强行按照另一种熟悉语言的方式来更改，这样做不仅常常会出错，同时也不是良好的编程习惯。

所以，我们要做的就是让自己去适应新的语言自身的生态环境，适应它本身的特性，它的一系列工具链，常用的库或框架。