### AI 在当前软件开发中的应用探讨

随着ChatGPT的横空出世，这两年人工智能成了热门话题，在不同的领域人们都在讨论如何将AI融入具体的应用，同时，人们也开始担忧自己的工作是否会被AI所取代。在编程领域，AI的出现并不算新闻，开发者们从多年以前就不断研究和探索如何更简单地让计算机生成代码，从各种DSL到UML代码生成。但这个过程始终需要更加专业的开发者来完成，也对操作者的计算机基础要求较高。然而，随着大语言模型的应用，AI生成代码变得真正智能起来。不仅是ChatGPT 4.0的组件，GitHub copilot、jetbrains 的AI assistant也迅速被集成到各种开发工具中。虽然生成的代码在安全性等细节方面仍有待提高，但在功能性方面已经变得完全可用。

作为开发者，我们并不需要过度担心是否会被取代，各种危言耸听的言论经过媒体的发酵往往搞得人心惶惶。在我看来，目前的情况正是我们长久追求的，我们不仅不应该畏惧AI，反而应该拥抱这一变化，谁能够更快地适应和掌握这一变化，谁才更容易在未来脱颖而出。

我经常遇到一些同事，工作的时候常常抱怨自己做的事情是重复劳动，没有创造力，想要换工作，但换了工作之后不久又开始同样的抱怨。当然这里面有企业的问题，但另一方面也有个人的问题。我们不妨考虑一下，是不是身边的同事总有那么几个人即便是在同一个项目相同的职位也能把事情做得更好，我们咒骂写下旧系统代码的人留下一堆垃圾的时候这几个人已然悄悄地重构整理了代码，写出了更适合当前阶段的系统和模块功能。当我们还在网络上看着漫画说当一个系统能运行就不要动它时候，这些人已经把一座危楼改建成了漂亮的别墅。同样的，当我们担忧AI的到来是否会替代我们的时候，他们已经把AI融入自己的日常工作之中了。可是当你去使用时候又会觉得怎么这么不顺手？我们抱怨工作乏味，然而，人工智能帮助我们来完成乏味的工作时我们又觉得不好用。实际上，有时候并不是工作乏味，而是我们自己不思考。我们从开始面对工作就没有认真思考怎么做效率更高，怎样能让自己更轻松。同样地，引入了AI之后，我们依然没有思考如何给它下指令来更好地完成工作。

前些天看到吴恩达博士的一段演讲，演示了如何使用多角色agent使得GPT更加好用，通过把工作内容细分成不同的阶段，并分配给不同的AI角色，使多个agent互相协同，与ChatGPT互相问答，上下文不断完善，从而获得我们需要的结果。根据统计数据，这样使用的效果比我们过去的方式效率提高了近两倍。

所以说，单单是AI本身无法代替我们来工作，这一点完全不必担忧，真正使得AI完成工作的依然是人。对于我们来说，现在是反思的时候了。我们要考虑的不是如何去堆砌一堆低效的代码，而是怎样给AI下达指令来获得更加高效、稳定、安全的代码；怎样借助于AI大模型突破我们既往的知识壁垒，从而使不同系统、语言更好地协同工作，创造出以往的个人和团队无法完成的产品。
